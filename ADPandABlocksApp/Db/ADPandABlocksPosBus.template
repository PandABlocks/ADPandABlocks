#====================================================================#
# Template file: ADPandABlocksPosBus.template
# Macros:
# % macro, PORT, Asyn Port name for ADPandABlocks coms
# % macro, P, Device prefix
# % macro, R, Device suffix
# % macro, POSBUS_IND, Position Bus index

record(stringin, "$(P)$(R)POSBUS$(POSBUS_IND)") {
  field(DESC, "Data end string")
  field(SCAN, "I/O Intr")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),$(POSBUS_IND))POSBUS$(POSBUS_IND)")
  #field(FTVL, "CHAR")
  #field(NELM, "1024")
}

record(mbbo, "$(P)$(R)POSBUS$(POSBUS_IND):CAPTURE") {
  field(DESC, "Data end string")
  field(ZRVL, "0")
  field(ZRST, "No")
  field(ONVL, "1")
  field(ONST, "Value")
  field(TWVL, "2")
  field(TWST, "Diff")
  field(THVL, "3")
  field(THST, "Sum")
  field(FRVL, "4")
  field(FRST, "Mean")
  field(FVVL, "5")
  field(FVST, "Min")
  field(SXVL, "6")
  field(SXST, "Max")
  field(SVVL, "7")
  field(SVST, "Min Max")
  field(EIVL, "8")
  field(EIST, "Min Max Mean")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),$(POSBUS_IND))POSBUS$(POSBUS_IND):CAPTURE")
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "$(P)$(R)POSBUS$(POSBUS_IND):SCALE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),$(POSBUS_IND))POSBUS$(POSBUS_IND):SCALE")
  field(PREC, 8)
  info(asyn:READBACK, "1")
}

#% archiver 10 Monitor
record(ao, "$(P)$(R)POSBUS$(POSBUS_IND):OFFSET") {
  field(DESC, "INENC offset value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),$(POSBUS_IND))POSBUS$(POSBUS_IND):OFFSET")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(stringout, "$(P)$(R)POSBUS$(POSBUS_IND):UNITS") {
  field(DESC, "INENC units value")
  field(DTYP, "asynOctetWrite")
  field(OUT, "@asyn($(PORT),$(POSBUS_IND))POSBUS$(POSBUS_IND):UNITS")
  info(asyn:READBACK, "1")
}

record(ao, "$(P)$(R)POSBUS$(POSBUS_IND):VAL") {
  field(DESC, "INENC value")
  field(DTYP, "asynFloat64")
  field(OUT, "@asyn($(PORT),$(POSBUS_IND))POSBUS$(POSBUS_IND):VAL")
  field(PREC, 4)
  info(asyn:READBACK, "1")
}

record(longout, "$(P)$(R)POSBUS$(POSBUS_IND):UNSCALEDVAL") {
  field(DESC, "INENC unscaled value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),$(POSBUS_IND))POSBUS$(POSBUS_IND):UNSCALEDVAL")
  info(asyn:READBACK, "1")
}

# Embedded screen type
record(longout, "$(P)$(R)POSBUS$(POSBUS_IND):SCREENTYPE") {
  field(DESC, "INENC scale value")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),$(POSBUS_IND))POSBUS$(POSBUS_IND):SCREENTYPE")
  info(asyn:READBACK, "1")
}

# Calibrate motor position (Requires  MotorSync template)
record(bo, "$(P)$(R)POSBUS$(POSBUS_IND):CALIBRATE") {
  field(DESC, "Manually sync motor with motorsync")
  field(ZNAM, "Done")
  field(ONAM, "Calibrating")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),$(POSBUS_IND))POSBUS$(POSBUS_IND):CALIBRATE")
  info(asyn:READBACK, "1")
}

# Reads setpos from the MotorSync template (if it exists)
record(longout, "$(P)$(R)POSBUS$(POSBUS_IND):SETPOS") {
  field(DESC, "INENC set current position")
  field(DTYP, "asynInt32")
  field(OUT, "@asyn($(PORT),$(POSBUS_IND))POSBUS$(POSBUS_IND):SETPOS")
  info(asyn:READBACK, "1")
}

# Underlying motor name from MotorSync template (if it exists)
record (stringin, "$(P)$(R)POSBUS$(POSBUS_IND):MOTORNAME") {
  field(DESC, "Name of motor")
  field(DTYP, "asynOctetRead")
  field(INP, "@asyn($(PORT),$(POSBUS_IND))POSBUS$(POSBUS_IND):MOTORNAME")
  field(SCAN, "I/O Intr")
  #info(asyn:READBACK, "1")
}
